@page "/books"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using BookStore.Client.Models
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Web

<PageTitle>BookStore - Fake Books Generator</PageTitle>

<div class="container-fluid">
    <h1 class="mb-4">üìö Fake Books Generator</h1>
    
    <!-- Controls Panel -->
    <div class="card mb-4">
        <div class="card-body">
            <div class="row g-3">
                <!-- Language/Region Selection -->
                <div class="col-md-3">
                    <label for="locale" class="form-label">Language/Region:</label>
                    <select id="locale" class="form-select" @bind="selectedLocale" @bind:event="onchange">
                        <option value="en">English (US)</option>
                        <option value="de">Deutsch (Germany)</option>
                        <option value="ja">Êó•Êú¨Ë™û (Japan)</option>
                        <option value="es">Espa√±ol (Spanish)</option>
                    </select>
                </div>
                
                <!-- Seed Configuration -->
                <div class="col-md-3">
                    <label for="seed" class="form-label">Seed:</label>
                    <div class="input-group">
                        <input type="number" id="seed" class="form-control" @bind="currentSeed" @bind:event="onchange" />
                        <button class="btn btn-outline-secondary" type="button" @onclick="GenerateRandomSeed">
                            üé≤
                        </button>
                    </div>
                </div>
                
                <!-- Likes Slider -->
                <div class="col-md-3">
                    <label for="likes" class="form-label">Likes: @likes.ToString("F1")</label>
                    <input type="range" id="likes" class="form-range" min="0" max="10" step="0.1" @bind="likes" @bind:event="onchange" />
                </div>
                
                <!-- Reviews Count -->
                <div class="col-md-3">
                    <label for="reviews" class="form-label">Reviews: @reviewCount.ToString("F1")</label>
                    <input type="counter" id="reviews" class="form-range" min="0" max="10" step="0.1" @bind="reviewCount" @bind:event="onchange" />
                </div>
            </div>
            
            <!-- Action Buttons -->
            <div class="row mt-3">
                <div class="col-md-6">
                    <div class="btn-group" role="group">
                        <input type="radio" class="btn-check" name="viewMode" id="tableView" checked @onchange="() => SetViewMode(ViewMode.Table)" />
                        <label class="btn btn-outline-primary" for="tableView">üìã Table View</label>
                        
                        <input type="radio" class="btn-check" name="viewMode" id="galleryView" @onchange="() => SetViewMode(ViewMode.Gallery)" />
                        <label class="btn btn-outline-primary" for="galleryView">üñºÔ∏è Gallery View</label>
                    </div>
                </div>
                <div class="col-md-6 text-end">
                    <button class="btn btn-success" @onclick="ExportToCSV" disabled="@isLoading">
                        üì• Export to CSV
                    </button>
                </div>
            </div>
        </div>
    </div>
    
    @if (isLoading && books.Count == 0)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p>Generating books...</p>
        </div>
    }
    else
    {
        @if (currentViewMode == ViewMode.Table)
        {
            <!-- Table View -->
            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead class="table-dark">
                        <tr>
                            <th>Index</th>
                            <th>ISBN</th>
                            <th>Title</th>
                            <th>Author</th>
                            <th>Publisher</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var book in books)
                        {
                            <tr style="cursor: pointer;" @onclick="() => ToggleBookDetails(book)">
                                <td>@book.Index</td>
                                <td><code>@book.ISBN</code></td>
                                <td><strong>@book.Title</strong></td>
                                <td>@book.Author</td>
                                <td>@book.Publisher</td>
                            </tr>
                            
                            @if (expandedBooks.Contains(book.Index))
                            {
                                <tr>
                                    <td colspan="7">
                                        <div class="card">
                                            <div class="card-body">
                                                <div class="row">
                                                    <div class="col-md-3">
                                                        <img src="@book.CoverImageUrl" alt="Book Cover" class="img-fluid rounded" style="max-height: 200px;" />
                                                    </div>
                                                    <div class="col-md-9">
                                                        <h5>@book.Title</h5>
                                                        <p><strong>Author:</strong> @book.Author</p>
                                                        <p><strong>Publisher:</strong> @book.Publisher</p>
                                                        <p><strong>ISBN:</strong> @book.ISBN</p>
                                                        
                                                        @if (book.Reviews.Any())
                                                        {
                                                            <h6>Reviews (@book.Reviews.Count):</h6>
                                                            @foreach (var review in book.Reviews)
                                                            {
                                                                <div class="mb-2 p-2 bg-light rounded">
                                                                    <div class="d-flex justify-content-between">
                                                                        <strong>@review.ReviewerName</strong>
                                                                        <span>
                                                                            @for (int i = 1; i <= 5; i++)
                                                                            {
                                                                                <span class="@(i <= review.Rating ? "text-warning" : "text-muted")">‚≠ê</span>
                                                                            }
                                                                        </span>
                                                                    </div>
                                                                    <p class="mb-0 mt-1">@review.Text</p>
                                                                </div>
                                                            }
                                                        }
                                                        else
                                                        {
                                                            <p class="text-muted">No reviews yet.</p>
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <!-- Gallery View -->
            <div class="row g-4">
                @foreach (var book in books)
                {
                    <div class="col-md-6 col-lg-4 col-xl-3">
                        <div class="card h-100" style="cursor: pointer;" @onclick="() => ToggleBookDetails(book)">
                            <img src="@book.CoverImageUrl" class="card-img-top" alt="Book Cover" style="height: 250px; object-fit: cover;" />
                            <div class="card-body d-flex flex-column">
                                <h6 class="card-title">@book.Title</h6>
                                <p class="card-text text-muted mb-1">@book.Author</p>
                                <p class="card-text text-muted small mb-2">@book.Publisher</p>
                                <div class="mt-auto">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <span class="badge bg-primary">@book.Reviews.Count reviews</span>
                                        <button class="btn btn-sm btn-outline-info" @onclick:stopPropagation="true" @onclick="() => ToggleBookDetails(book)">
                                            @(expandedBooks.Contains(book.Index) ? "‚ûñ" : "‚ûï")
                                        </button>
                                    </div>
                                </div>
                            </div>
                            
                            @if (expandedBooks.Contains(book.Index))
                            {
                                <div class="card-footer">
                                    <small><strong>ISBN:</strong> @book.ISBN</small>
                                    @if (book.Reviews.Any())
                                    {
                                        <div class="mt-2">
                                            <strong>Recent Reviews:</strong>
                                            @foreach (var review in book.Reviews.Take(2))
                                            {
                                                <div class="mt-1 p-1 bg-light rounded small">
                                                    <strong>@review.ReviewerName:</strong> @review.Text
                                                </div>
                                            }
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        }
        
        <!-- Infinite Scroll Loading -->
        <div class="text-center mt-4" style="min-height: 100px;">
            @if (isLoading)
            {
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading more books...</span>
                </div>
                <p>Loading more books...</p>
            }
            else
            {
                <p class="text-muted">Scroll down to load more books...</p>
            }
        </div>
    }
</div>

<script>
    window.setupInfiniteScroll = (dotNetHelper) => {
        const handleScroll = () => {
            if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight - 1000) {
                dotNetHelper.invokeMethodAsync('LoadMoreBooks');
            }
        };
        
        window.addEventListener('scroll', handleScroll);
        
        return {
            dispose: () => {
                window.removeEventListener('scroll', handleScroll);
            }
        };
    };
</script>

@code {
    private List<Book> books = new();
    private HashSet<int> expandedBooks = new();
    
    private string selectedLocale = "en";
    private int currentSeed = 12345;
    private double likes = 0.0;
    private double reviewCount = 0.0;
    
    private string _previousLocale = "en";
    private int _previousSeed = 12345;
    private double _previousLikes = 0.0;
    private double _previousReviewCount = 0.0;
    private int currentPage = 1;
    private bool isLoading = false;
    private bool hasMoreData = true;
    
    private ViewMode currentViewMode = ViewMode.Table;
    
    private DotNetObjectReference<Books>? dotNetHelper;
    private IJSObjectReference? scrollModule;
    
    public enum ViewMode
    {
        Table,
        Gallery
    }
    
    protected override async Task OnInitializedAsync()
    {
        dotNetHelper = DotNetObjectReference.Create(this);
        await LoadBooks(resetData: true);
        await SetupInfiniteScroll();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SetupInfiniteScroll();
        }
        
        // Check if parameters have changed
        if (_previousLocale != selectedLocale || _previousSeed != currentSeed || 
            Math.Abs(_previousLikes - likes) > 0.01 || Math.Abs(_previousReviewCount - reviewCount) > 0.01)
        {
            _previousLocale = selectedLocale;
            _previousSeed = currentSeed;
            _previousLikes = likes;
            _previousReviewCount = reviewCount;
            
            await LoadBooks(resetData: true);
        }
    }
    
    private async Task SetupInfiniteScroll()
    {
        try
        {
            scrollModule = await JSRuntime.InvokeAsync<IJSObjectReference>("setupInfiniteScroll", dotNetHelper);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error setting up infinite scroll: {ex.Message}");
        }
    }
    
    [JSInvokable]
    public async Task LoadMoreBooks()
    {
        if (!isLoading && hasMoreData)
        {
            await LoadBooks(resetData: false);
        }
    }
    
    private async Task LoadBooks(bool resetData = false)
    {
        if (isLoading) return;
        
        isLoading = true;
        StateHasChanged();
        
        try
        {
            if (resetData)
            {
                books.Clear();
                expandedBooks.Clear();
                currentPage = 1;
                hasMoreData = true;
            }
            
            var baseUrl = "https://localhost:7251"; // URL correcta de la API
            var url = $"{baseUrl}/api/books?locale={selectedLocale}&seed={currentSeed}&page={currentPage}&pageSize=20&likes={likes:F1}&reviewCount={reviewCount:F1}";
            
            var response = await Http.GetFromJsonAsync<BookResponse>(url);
            
            if (response != null && response.Books.Any())
            {
                books.AddRange(response.Books);
                currentPage++;
                hasMoreData = response.HasNextPage;
            }
            else
            {
                hasMoreData = false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading books: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private async Task OnParametersChanged()
    {
        await LoadBooks(resetData: true);
    }
    
    private void GenerateRandomSeed()
    {
        currentSeed = new Random().Next(1, 100000);
        _ = Task.Run(async () => await OnParametersChanged());
    }
    
    private void ToggleBookDetails(Book book)
    {
        if (expandedBooks.Contains(book.Index))
        {
            expandedBooks.Remove(book.Index);
        }
        else
        {
            expandedBooks.Add(book.Index);
        }
    }
    
    private void SetViewMode(ViewMode viewMode)
    {
        currentViewMode = viewMode;
    }
    
    private async Task ExportToCSV()
    {
        try
        {
            var pagesLoaded = (int)Math.Ceiling((double)books.Count / 20);
            var baseUrl = "https://localhost:7251"; // URL correcta de la API
            var url = $"{baseUrl}/api/books/export?locale={selectedLocale}&seed={currentSeed}&pages={pagesLoaded}&likes={likes:F1}&reviewCount={reviewCount:F1}";
            
            await JSRuntime.InvokeVoidAsync("open", url, "_blank");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error exporting to CSV: {ex.Message}");
        }
    }
    
    public void Dispose()
    {
        dotNetHelper?.Dispose();
        scrollModule?.DisposeAsync();
    }
}
